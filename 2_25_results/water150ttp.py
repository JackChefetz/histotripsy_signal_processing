# water, 150V, intensity 0.5, min r2 0.4

import re

data = """{[16:20:27.924000]}    {[                1.6625]}
    {[16:20:31.973000]}    {[               20.4662]}
    {[16:20:36.030000]}    {'Error: poor fit'       }
    {[16:20:40.105000]}    {[                2.8013]}
    {[16:20:44.167000]}    {[                3.0349]}
    {[16:20:48.218000]}    {[                3.0349]}
    {[16:20:52.263000]}    {[                1.7903]}
    {[16:20:56.303000]}    {[                1.7402]}
    {[16:21:00.323000]}    {[                4.0210]}
    {[16:21:04.373000]}    {[                2.5992]}
    {[16:21:08.418000]}    {'Error: poor fit'       }
    {[16:21:12.452000]}    {[                1.9572]}
    {[16:21:16.508000]}    {'Error: poor fit'       }
    {[16:21:20.563000]}    {[                2.4875]}
    {[16:21:24.602000]}    {[                1.5881]}
    {[16:21:28.642000]}    {[                3.7550]}
    {[16:21:32.687000]}    {[                2.2294]}
    {[16:21:36.727000]}    {[                1.5981]}
    {[16:21:40.793000]}    {'Error: ttp is too long'}
    {[16:21:44.852000]}    {[                1.8922]}
    {[16:21:49.687000]}    {[               10.0457]}
    {[16:21:53.747000]}    {[                3.7373]}
    {[16:21:57.798000]}    {[                6.7505]}
    {[16:22:01.841000]}    {'Error: poor fit'       }
    {[16:22:05.902000]}    {'Error: poor fit'       }
    {[16:22:09.967000]}    {[                2.2696]}
    {[16:22:14.032000]}    {'Error: poor fit'       }
    {[16:22:18.086000]}    {'Error: poor fit'       }
    {[16:22:22.155000]}    {'Error: poor fit'       }
    {[16:22:26.216000]}    {[                5.9533]}
    {[16:22:30.261000]}    {'Error: poor fit'       }
    {[16:22:34.330000]}    {[                2.0245]}
    {[16:22:38.401000]}    {'Error: poor fit'       }
    {[16:22:42.467000]}    {'Error: poor fit'       }
    {[16:22:46.542000]}    {[               17.7162]}
    {[16:22:50.621000]}    {'Error: poor fit'       }
    {[16:22:54.686000]}    {'Error: poor fit'       }
    {[16:22:58.751000]}    {'Error: poor fit'       }
    {[16:23:02.827000]}    {'Error: poor fit'       }
    {[16:23:06.906000]}    {[                7.7379]}
    {[16:23:10.982000]}    {[                1.6325]}
    {[16:23:15.066000]}    {'Error: poor fit'       }
    {[16:23:19.150000]}    {[               17.6942]}
    {[16:23:23.225000]}    {[               28.5512]}
    {[16:23:27.302000]}    {'Error: poor fit'       }
    {[16:23:31.381000]}    {'Error: poor fit'       }
    {[16:23:35.462000]}    {[                3.8840]}
    {[16:23:39.549000]}    {[                6.9473]}
    {[16:23:43.641000]}    {[                1.4789]}
    {[16:23:47.726000]}    {[                1.2657]}
    {[16:23:51.820000]}    {[                5.5167]}
    {[16:23:55.905000]}    {[                1.5811]}
    {[16:23:59.970000]}    {'Error: poor fit'       }
    {[16:24:04.066000]}    {'Error: poor fit'       }
    {[16:24:08.164000]}    {'Error: poor fit'       }
    {[16:24:12.255000]}    {[                2.3133]}
    {[16:24:16.356000]}    {[                4.2216]}
    {[16:24:20.459000]}    {'Error: poor fit'       }
    {[16:24:24.566000]}    {'Error: poor fit'       }
    {[16:24:28.655000]}    {'Error: poor fit'       }
    {[16:24:32.760000]}    {'Error: poor fit'       }
    {[16:24:36.865000]}    {[               21.6521]}
    {[16:24:40.945000]}    {[                1.4153]}
    {[16:24:45.049000]}    {'Error: poor fit'       }
    {[16:24:49.154000]}    {[                1.7422]}
    {[16:24:53.249000]}    {[                5.4515]}
    {[16:24:57.355000]}    {'Error: poor fit'       }
    {[16:25:01.465000]}    {[                5.7450]}
    {[16:25:05.565000]}    {[                1.9878]}"""

# Define a regex pattern that captures the second element (inside the second curly braces)
pattern = re.compile(r'\{[^\}]*\}\s*\{([^\}]*)\}')

# Create an empty list to store the extracted elements
values = []

# Process each line in the data
for line in data.splitlines():
    match = pattern.search(line)
    if match:
        # Extract and strip any extra whitespace from the captured group
        value = match.group(1).strip().strip('\'"')
        if value.startswith('[') and value.endswith(']'):
            value = value[1:-1].strip()
        values.append(value)

#print(values)